<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use App\Http\Requests\{{ model }}Request;
use App\Http\Repositories\Interfaces\I{{ model }}Repository;
use App\Exceptions\MainException;
use Illuminate\Http\Request;

class {{ class }} extends Controller
{
    /**
     * @var \App\Http\Repositories\Interfaces\I{{ model }}Repository
     */
    public $I{{ model }}Repository;

    /**
     * @param  \App\Http\Repositories\Interfaces\I{{ model }}Repository  $I{{ model }}Repository
     */
    public function __construct(I{{ model }}Repository $I{{ model }}Repository)
    {
        $this->I{{ model }}Repository = $I{{ model }}Repository;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function index()
    {
        $data = $this->I{{ model }}Repository->get();

        return $this->responseSuccess(null, compact("data"));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return $this->responseSuccess();
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \{{ namespacedStoreRequest }}  $request
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function store({{ model }}Request $request)
    {
        $result = $this->I{{ model }}Repository->create($request->validated());

        return $this->responseSuccess(null, compact("result"));
    }

    /**
     * Display the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        $dataShow = $this->I{{ model }}Repository->find(${{ modelVariable }}->id);

        return $this->responseSuccess(null, compact("dataShow"));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function edit({{ model }} ${{ modelVariable }})
    {
        $data = $this->I{{ model }}Repository->find(${{ modelVariable }}->id);

         return $this->responseSuccess(null, compact("data"));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \{{ namespacedUpdateRequest }}  $request
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function update({{ model }}Request $request, {{ model }} ${{ modelVariable }})
    {
        $result = $this->I{{ model }}Repository->update($request->validated() ,${{ modelVariable }}->id);

       return $this->responseSuccess(null, compact("result"));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        $result = $this->I{{ model }}Repository->delete(${{ modelVariable }}->id);

        return $this->responseSuccess();
    }

    /**
     * active id Records Table.
     *
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function active($id)
    {
       $result = $this->I{{ model }}Repository->active($id);

       return $this->responseSuccess();
    }

    /**
     * delete multi ids Records Table.
     *
     * @return \Illuminate\Http\Response
     * @author moner khalil
     */
    public function multiDestroy(Request $request){
        $result = $this->I{{ model }}Repository->multiDestroy($request);

        return $this->responseSuccess();
    }
}
